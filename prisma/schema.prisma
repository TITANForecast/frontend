// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Test model to verify database connectivity and migrations
model TestConnection {
  id        String   @id @default(cuid())
  message   String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("test_connections")
}

// Admin Panel Models

model Dealer {
  id                  String               @id @default(cuid())
  name                String
  address             String?
  city                String?
  state               String?
  zip                 String?
  contactEmail        String?
  contactPhone        String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relations
  apiConfig           DealerApiConfig?
  users               UserDealer[]
  defaultUsers        User[]               @relation("DefaultDealer")
  importLogs          ImportLog[]
  serviceCategories   ServiceCategory[]
  serviceSubcategories ServiceSubcategory[]
  services            Service[]

  @@map("dealers")
}

model DealerApiConfig {
  id                 String    @id @default(cuid())
  dealerId           String    @unique
  dataSource         String    @default("Certify-Staging") // Data Source: "Certify-Staging" or "DealerVault-Production"
  rooftopId          String
  programId          String
  fileTypeCodes      String[]  @default(["SV"])
  compareDateDefault Int       @default(1)
  lastSuccess        DateTime?
  lastError          String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  dealer             Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@map("dealer_api_configs")
}

model User {
  id               String       @id @default(cuid())
  cognitoSub       String?      @unique  // Links to Cognito user's 'sub' attribute
  email            String       @unique
  name             String
  role             String       // SUPER_ADMIN, MULTI_DEALER, USER
  defaultDealerId  String
  isActive         Boolean      @default(true)
  lastLoginAt      DateTime?    // Track last login time
  invitedAt        DateTime?    // Track when user was invited
  invitedBy        String?      // Admin who invited the user
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relations
  defaultDealer    Dealer       @relation("DefaultDealer", fields: [defaultDealerId], references: [id])
  dealers          UserDealer[]
  servicesCreated  Service[]    @relation("ServiceCreatedBy")
  servicesUpdated  Service[]    @relation("ServiceUpdatedBy")

  @@index([email])
  @@index([cognitoSub])
  @@map("users")
}

model UserDealer {
  userId    String
  dealerId  String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dealer    Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@id([userId, dealerId])
  @@map("user_dealers")
}

model ImportLog {
  id                BigInt    @id @default(autoincrement())
  dealerId          String    @map("dealer_id")
  importType        String    @map("import_type")
  fileType          String?   @map("file_type")
  requestId         String?   @map("request_id")
  status            String
  totalRecords      Int?      @map("total_records")
  processedRecords  Int?      @map("processed_records")
  failedRecords     Int?      @map("failed_records")
  newRecords        Int?      @map("new_records")
  updatedRecords    Int?      @map("updated_records")
  errorMessage      String?   @map("error_message") @db.Text
  importStartTime   DateTime? @map("import_start_time") @db.Timestamp()
  importEndTime     DateTime? @map("import_end_time") @db.Timestamp()
  elapsedSeconds    Decimal?  @map("elapsed_seconds") @db.Decimal(8, 2)
  createdAt         DateTime? @map("created_at") @db.Timestamp()
  
  // Relations
  dealer            Dealer    @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([dealerId])
  @@index([fileType])
  @@index([status])
  @@index([createdAt])
  @@map("import_log")
}

// Dealer Settings Models

model ServiceCategory {
  id             BigInt              @id @default(autoincrement())
  dealerId       String              @map("dealer_id")
  name           String              @db.VarChar(100)
  isActive       Boolean             @default(true) @map("is_active")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  
  // Relations
  dealer         Dealer              @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  subcategories  ServiceSubcategory[]
  services       Service[]

  @@unique([dealerId, name], map: "unique_dealer_category_name")
  @@index([dealerId, isActive])
  @@map("service_categories")
}

model ServiceSubcategory {
  id          BigInt          @id @default(autoincrement())
  dealerId    String          @map("dealer_id")
  categoryId  BigInt          @map("category_id")
  name        String          @db.VarChar(100)
  isActive    Boolean         @default(true) @map("is_active")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  
  // Relations
  dealer      Dealer          @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  services    Service[]

  @@unique([dealerId, categoryId, name], map: "unique_dealer_category_subcategory_name")
  @@index([dealerId, categoryId, isActive])
  @@map("service_subcategories")
}

model Service {
  id             BigInt              @id @default(autoincrement())
  dealerId       String              @map("dealer_id")
  name           String              @db.VarChar(100)
  categoryId     BigInt              @map("category_id")
  subcategoryId  BigInt?             @map("subcategory_id")
  isActive       Boolean             @default(true) @map("is_active")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  createdBy      String?             @map("created_by")
  updatedBy      String?             @map("updated_by")
  
  // Relations
  dealer         Dealer              @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  category       ServiceCategory     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  subcategory    ServiceSubcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  createdByUser  User?               @relation("ServiceCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedByUser  User?               @relation("ServiceUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@unique([dealerId, name, categoryId, subcategoryId], map: "unique_dealer_service_name_category_subcategory")
  @@index([dealerId, isActive])
  @@index([dealerId, categoryId])
  @@map("services")
}
