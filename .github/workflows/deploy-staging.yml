name: Deploy Frontend to ECS Staging

on:
  push:
    tags:
      - 'v*staging'
  pull_request:
    branches:
      - staging
    paths-ignore:
      - 'docs/**'
      - '.github/workflows/**'
      - 'README.md'
      - '*.md'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy (e.g., v1.0.0-staging)'
        required: true
        default: 'v1.0.0-staging'

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  ECR_REPOSITORY: 'titan-frontend-staging'
  ECS_CLUSTER: 'titan-cluster'
  ECS_SERVICE: 'titan-frontend-staging'
  # Cognito Authentication
  NEXT_PUBLIC_AWS_REGION: us-east-1
  NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
  NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}

jobs:
  # Check if there are relevant changes
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for relevant changes
      id: changes
      run: |
        # For tag pushes and workflow dispatch, always deploy
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Tag deployment detected - always deploy"
          echo "has-changes=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual deployment detected - always deploy"
          echo "has-changes=true" >> $GITHUB_OUTPUT
        else
          # For pull requests, check if there are any changes to application code
          if git diff --quiet HEAD~1 HEAD -- app/ components/ lib/ public/ package.json package-lock.json next.config.js tsconfig.json postcss.config.js; then
            echo "No relevant application code changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Relevant application code changes detected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
        fi

  # Build and test the frontend application
  build:
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get environment variables from AWS Secrets Manager
      id: get-secrets
      run: |
        SECRET_NAME="titan-frontend/staging/config"
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --region ${{ env.AWS_REGION }} --query 'SecretString' --output text)
        
        if [ -z "$SECRET_VALUE" ]; then
          echo "❌ Failed to retrieve secrets from AWS Secrets Manager"
          exit 1
        fi
        
        # Extract individual environment variables
        NEXT_PUBLIC_AWS_REGION=$(echo "$SECRET_VALUE" | jq -r '.NEXT_PUBLIC_AWS_REGION')
        NEXT_PUBLIC_COGNITO_USER_POOL_ID=$(echo "$SECRET_VALUE" | jq -r '.NEXT_PUBLIC_COGNITO_USER_POOL_ID')
        NEXT_PUBLIC_COGNITO_CLIENT_ID=$(echo "$SECRET_VALUE" | jq -r '.NEXT_PUBLIC_COGNITO_CLIENT_ID')
        NEXT_PUBLIC_APP_URL=$(echo "$SECRET_VALUE" | jq -r '.NEXT_PUBLIC_APP_URL')
        
        echo "NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION" >> $GITHUB_OUTPUT
        echo "NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID" >> $GITHUB_OUTPUT
        echo "NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        NEXT_PUBLIC_AWS_REGION: ${{ steps.get-secrets.outputs.NEXT_PUBLIC_AWS_REGION }}
        NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ steps.get-secrets.outputs.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
        NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ steps.get-secrets.outputs.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
        NEXT_PUBLIC_APP_URL: ${{ steps.get-secrets.outputs.NEXT_PUBLIC_APP_URL }}
      run: |
        # Build a docker container with build arguments and push it to ECR
        docker build --platform linux/amd64 \
          --build-arg NEXT_PUBLIC_AWS_REGION="$NEXT_PUBLIC_AWS_REGION" \
          --build-arg NEXT_PUBLIC_COGNITO_USER_POOL_ID="$NEXT_PUBLIC_COGNITO_USER_POOL_ID" \
          --build-arg NEXT_PUBLIC_COGNITO_CLIENT_ID="$NEXT_PUBLIC_COGNITO_CLIENT_ID" \
          --build-arg NEXT_PUBLIC_APP_URL="$NEXT_PUBLIC_APP_URL" \
          -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Deploy to ECS
  deploy:
    needs: [check-changes, build]
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS
      run: |
        echo "🚀 Deploying to ECS staging service..."
        
        # Update the ECS service to use the new image
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment
        
        echo "✅ ECS service update initiated"

    - name: Wait for deployment to complete
      run: |
        echo "⏳ Waiting for ECS deployment to complete..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        echo "✅ ECS deployment completed successfully"

    - name: Get deployment status
      run: |
        echo "🌐 Staging App Domain: https://app-staging.titanforecast.com"
        echo "🐳 ECR Repository: ${{ env.ECR_REPOSITORY }}"
        echo "📦 ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "🚀 ECS Service: ${{ env.ECS_SERVICE }}"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🔀 PR Preview: #${{ github.event.number }} - ${{ github.event.pull_request.title }}"
          echo "🏷️  Branch: ${{ github.head_ref }}"
        elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          echo "🏷️  Tag: ${{ github.ref_name }}"
        else
          echo "🏷️  Branch: ${{ github.ref_name }}"
        fi
        echo "📝 Commit: ${{ github.sha }}"
        echo "::notice::Staging app frontend deployed successfully to ECS! URL: https://app-staging.titanforecast.com"

  # Security scan
  security-scan:
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'

    - name: Security scan summary
      run: |
        echo "✅ Security scan completed successfully"
        echo "📊 Vulnerability scan results are shown above"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🔀 PR Preview: #${{ github.event.number }} - ${{ github.event.pull_request.title }}"
          echo "🏷️  Branch: ${{ github.head_ref }}"
        elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          echo "🏷️  Tag: ${{ github.ref_name }}"
        else
          echo "🏷️  Branch: ${{ github.ref_name }}"
        fi
        echo "📝 Commit: ${{ github.sha }}"
