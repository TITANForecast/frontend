name: Deploy Frontend to ECS Staging

on:
  push:
    branches:
      - staging
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: titan-frontend-staging
  ECS_SERVICE: titan-frontend-staging
  ECS_CLUSTER: titan-cluster
  ECS_TASK_DEFINITION: titan-frontend-staging

jobs:
  deploy:
    name: Deploy to ECS Staging
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: infrastructure/ecs-task-definition.json
        container-name: titan-frontend-staging
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deployment summary
      run: |
        echo "✅ ECS staging deployment completed successfully!"
        echo "🐳 Image: ${{ steps.build-image.outputs.image }}"
        echo "🏷️  Tag: ${{ github.sha }}"
        echo "🚀 Service: ${{ env.ECS_SERVICE }}"
        echo "📦 Cluster: ${{ env.ECS_CLUSTER }}"
        echo "🌐 Staging URL: https://app-staging.titanforecast.com"
        echo "::notice::Frontend deployed successfully to ECS staging!"
