name: Code Quality & Testing

on:
  pull_request:
    branches: [ main, staging ]
    paths-ignore:
      - 'docs/**'
      - '.github/workflows/**'
      - 'README.md'
      - '*.md'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  # Cognito Authentication
  NEXT_PUBLIC_AWS_REGION: us-east-1
  NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
  NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}

jobs:
  # Check if there are relevant changes
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for relevant changes
      id: changes
      run: |
        # Check if there are any changes to application code
        if git diff --quiet HEAD~1 HEAD -- app/ components/ lib/ public/ package.json package-lock.json next.config.js tsconfig.json postcss.config.js; then
          echo "No relevant application code changes detected"
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          echo "Relevant application code changes detected"
          echo "has-changes=true" >> $GITHUB_OUTPUT
        fi

  quality-checks:
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run code linting
      run: npm run lint

    - name: TypeScript type checking
      run: npx tsc --noEmit

    - name: Build verification
      run: npm run build

    - name: Quality checks summary
      run: |
        echo "‚úÖ Code quality checks completed successfully"
        echo "üìä Linting, type checking, and build verification passed"
        echo "üîç Ready for additional testing phases"

  # Future: Add Playwright E2E tests
  # e2e-tests:
  #   runs-on: ubuntu-latest
  #   needs: quality-checks
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ env.NODE_VERSION }}
  #       cache: 'npm'
  #   - name: Install dependencies
  #     run: npm ci
  #   - name: Install Playwright browsers
  #     run: npx playwright install --with-deps
  #   - name: Run Playwright tests
  #     run: npx playwright test
  #   - name: Upload test results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: playwright-report
  #       path: playwright-report/
  #       retention-days: 30

  # Future: Add security scanning
  # security-scan:
  #   runs-on: ubuntu-latest
  #   needs: quality-checks
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       scan-type: 'fs'
  #       scan-ref: '.'
  #       format: 'table'
  #       exit-code: '0'
  #   - name: Run npm audit
  #     run: npm audit --audit-level moderate
  #   - name: Security scan summary
  #     run: |
  #       echo "‚úÖ Security scan completed"
  #       echo "üîí Vulnerability assessment finished"
