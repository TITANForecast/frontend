name: Deploy Frontend to ECS Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: titan-frontend-production
  ECS_SERVICE: titan-frontend-production
  ECS_CLUSTER: titan-cluster
  ECS_TASK_DEFINITION: titan-frontend-production

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get production secrets
      id: get-secrets
      run: |
        # Get production secrets for build-time environment variables
        SECRETS=$(aws secretsmanager get-secret-value --secret-id "titan-frontend/production/config" --query 'SecretString' --output text)
        echo "NEXT_PUBLIC_AWS_REGION=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_AWS_REGION')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_COGNITO_USER_POOL_ID=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_COGNITO_USER_POOL_ID')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_COGNITO_CLIENT_ID=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_COGNITO_CLIENT_ID')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_APP_URL=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_APP_URL')" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_BUILD: true
        # Pass NEXT_PUBLIC_* variables to Docker build
        NEXT_PUBLIC_AWS_REGION: ${{ env.NEXT_PUBLIC_AWS_REGION }}
        NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ env.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
        NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ env.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
        NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}
      run: |
        # Build a docker container and push it to ECR
        docker build \
          --build-arg NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION \
          --build-arg NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID \
          --build-arg NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID \
          --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build \
          --build-arg NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION \
          --build-arg NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID \
          --build-arg NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID \
          --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update ECS task definition and deploy
      run: |
        echo "üìù Updating ECS task definition with new image..."
        
        # Use our updated task definition file
        TASK_DEFINITION=$(cat infrastructure/ecs-task-definition.json)
        
        # Update the image in the task definition
        UPDATED_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build.outputs.image }}" '.containerDefinitions[0].image = $IMAGE')
        
        # Register the new task definition
        NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
          --family ${{ env.ECS_TASK_DEFINITION }} \
          --network-mode $(echo $UPDATED_TASK_DEFINITION | jq -r '.networkMode') \
          --requires-compatibilities $(echo $UPDATED_TASK_DEFINITION | jq -r '.requiresCompatibilities | join(",")') \
          --cpu $(echo $UPDATED_TASK_DEFINITION | jq -r '.cpu') \
          --memory $(echo $UPDATED_TASK_DEFINITION | jq -r '.memory') \
          --execution-role-arn $(echo $UPDATED_TASK_DEFINITION | jq -r '.executionRoleArn') \
          --task-role-arn $(echo $UPDATED_TASK_DEFINITION | jq -r '.taskRoleArn') \
          --container-definitions "$(echo $UPDATED_TASK_DEFINITION | jq -c '.containerDefinitions')" \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "‚úÖ New task definition registered: $NEW_TASK_DEFINITION"
        
        # Update the ECS service
        echo "üöÄ Updating ECS service..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEFINITION \
          --region ${{ env.AWS_REGION }} \
          --query 'service.serviceName' \
          --output text
        
        echo "‚è≥ Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Service update completed successfully!"

    - name: Deployment summary
      run: |
        echo "‚úÖ ECS production deployment completed successfully!"
        echo "üê≥ Image: ${{ needs.build.outputs.image }}"
        echo "üè∑Ô∏è  Tag: ${{ needs.build.outputs.image-tag }}"
        echo "üöÄ Service: ${{ env.ECS_SERVICE }}"
        echo "üì¶ Cluster: ${{ env.ECS_CLUSTER }}"
        echo "üåê Production URL: https://app.titanforecast.com"
        echo "::notice::Frontend deployed successfully to ECS production!"
