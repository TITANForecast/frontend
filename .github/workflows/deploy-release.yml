name: Deploy Frontend to ECS Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: titan-frontend-production
  ECS_SERVICE: titan-frontend-production
  ECS_CLUSTER: titan-cluster
  ECS_TASK_DEFINITION: titan-frontend-production

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get production secrets
      id: get-secrets
      run: |
        # Get production secrets for build-time environment variables
        SECRETS=$(aws secretsmanager get-secret-value --secret-id "titan-frontend/production/config" --query 'SecretString' --output text)
        echo "NEXT_PUBLIC_AWS_REGION=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_AWS_REGION')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_COGNITO_USER_POOL_ID=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_COGNITO_USER_POOL_ID')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_COGNITO_CLIENT_ID=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_COGNITO_CLIENT_ID')" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_APP_URL=$(echo $SECRETS | jq -r '.NEXT_PUBLIC_APP_URL')" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_BUILD: true
        # Pass NEXT_PUBLIC_* variables to Docker build
        NEXT_PUBLIC_AWS_REGION: ${{ env.NEXT_PUBLIC_AWS_REGION }}
        NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ env.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
        NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ env.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
        NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}
      run: |
        # Build a docker container and push it to ECR
        docker build \
          --build-arg NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION \
          --build-arg NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID \
          --build-arg NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID \
          --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build \
          --build-arg NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION \
          --build-arg NEXT_PUBLIC_COGNITO_USER_POOL_ID=$NEXT_PUBLIC_COGNITO_USER_POOL_ID \
          --build-arg NEXT_PUBLIC_COGNITO_CLIENT_ID=$NEXT_PUBLIC_COGNITO_CLIENT_ID \
          --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        echo "üìù Planning deployment with image tag: ${{ needs.build.outputs.image-tag }}"
        terraform plan \
          -target=module.frontend_production \
          -var="production_image_tag=${{ needs.build.outputs.image-tag }}" \
          -var="aws_profile=" \
          -out=tfplan
        
    - name: Terraform Apply
      run: |
        cd infrastructure
        echo "üöÄ Applying Terraform changes..."
        terraform apply -auto-approve tfplan

    # Note: Database migrations are skipped in CI/CD because GitHub Actions runners
    # cannot reach the RDS database in the private subnet.
    # 
    # ‚ö†Ô∏è  IMPORTANT: For production deployments, ALWAYS run migrations manually BEFORE deploying:
    # 1. Via SSM port forwarding to the bastion host (see docs/database-iam-setup.md in infrastructure repo)
    # 2. Via ECS Exec into a running production container
    #
    # Never deploy code that requires schema changes without running migrations first!
        
    - name: Wait for service stability
      run: |
        echo "‚è≥ Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Service update completed successfully!"

    - name: Deployment summary
      run: |
        echo "‚úÖ ECS production deployment completed successfully!"
        echo "üê≥ Image: ${{ needs.build.outputs.image }}"
        echo "üè∑Ô∏è  Tag: ${{ needs.build.outputs.image-tag }}"
        echo "üöÄ Service: ${{ env.ECS_SERVICE }}"
        echo "üì¶ Cluster: ${{ env.ECS_CLUSTER }}"
        echo "üåê Production URL: https://app.titanforecast.com"
        echo "::notice::Frontend deployed successfully to ECS production!"
